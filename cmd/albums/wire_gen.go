// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"crab-dev/simple-go-gin/albums"
	"crab-dev/simple-go-gin/albums/controllers"
	albums3 "crab-dev/simple-go-gin/albums/controllers/albums"
	"crab-dev/simple-go-gin/albums/services"
	albums2 "crab-dev/simple-go-gin/albums/services/albums"
	"crab-dev/simple-go-gin/pkg/app"
	"crab-dev/simple-go-gin/pkg/cache"
	"crab-dev/simple-go-gin/pkg/config"
	"crab-dev/simple-go-gin/pkg/logger"
	"crab-dev/simple-go-gin/pkg/transports/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := logger.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	zapLogger, err := logger.New(options)
	if err != nil {
		return nil, err
	}
	albumsOptions, err := albums.NewOptions(viper, zapLogger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	albumsService := albums2.New(zapLogger)
	albumsController := albums3.NewAlbumsController(zapLogger, albumsService)
	initControllers := albums3.CreateInitControllersFn(albumsController)
	engine := http.NewRouter(httpOptions, zapLogger, initControllers)
	server, err := http.New(httpOptions, zapLogger, engine)
	if err != nil {
		return nil, err
	}
	application, err := albums.NewApp(albumsOptions, zapLogger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var servicesSet = wire.NewSet(config.ProviderSet, logger.ProviderSet, cache.ProviderSet, http.ProviderSet)

var businessServicesSet = wire.NewSet(services.ProviderSet, controllers.ProviderSet)

var appSet = wire.NewSet(servicesSet, businessServicesSet, albums.ProviderSet)
